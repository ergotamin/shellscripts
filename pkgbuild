#!/bin/bash
: -+- utf8 -+- shellscript -+- '
: -----------------------------
:  (c) 2018 MIT License
:  Marcel Bobolz
:  <ergotamin.source@gmail.com>
: -----------------------------'

# site-functions
function init() {
	typeset -gx bold="\x1b[1m"
	typeset -gx uline="\x1b[4m"
	typeset -gx ital="\x1b[3m"
	typeset -gx sgr0="\x1b(B\x1b[m"
	if [[ $(tput colors) -eq 256 ]]; then
		typeset -gx green="\x1b[38;2;110;255;0m"
		typeset -gx red="\x1b[38;2;255;0;50m"
		typeset -gx orange="\x1b[38;2;255;115;0m"
		typeset -gx purple="\x1b[38;2;125;0;255m"
	fi
	typeset -gx TFILE
	typeset -gx TDIR
	typeset -gx DEST
	typeset -gx PKGNAME
	typeset -gx PKGVER
	typeset -gx PKGDESC
	typeset -gx PKGARCH
}

function send() {
	case $1 in
		msg)
			printf "\t ${purple}|${orange}${bold}$2${sgr0}"
			;;
		req)
			read -r $2
			;;
		chk)
			printf "${bold}${green}\t$(tput cuu1)\U2714\n${sgr0}"
			;;
		err)
			printf "\t  ${red}${bold}[-ERROR-$2]${sgr0}\n"
			exit 1
			;;
	esac
	return $?
}

function process() {
	local -a DASH=(
		'/'
		'-'
		'\\'
		'|'
	)
	local -i IDX=4
	while [[ $(kill -0 $1 2>/dev/zero && printf 0 || printf 1) -eq 0 ]]; do
		send msg "$2 ${orange}${DASH[$((IDX % 4))]}\r"
		IDX+=1
	done
	printf "\n"
	send chk
	return $?
}

# process-functions
function pkgbuild::source() {
	TFILE=$(mktemp --suffix .tar.xz -p /tmp -u pkgsrcXXXXXX)
	pushd $1 &>/dev/zero
	({
		local SCRIPT=""
		if [[ -e .INSTALL ]]; then
			SCRIPT=".INSTALL"
		fi
		LANG=C \
			bsdtar --acls --xattrs --preserve-permissions \
			-cf - ${SCRIPT} * \
			| xz -4 --threads=0 -z -c - >${TFILE}
	}) &
	process $! "Creating source-archive..."
	popd &>/dev/zero
	return $?
}

function pkgbuild::extract() {
	TDIR=$(mktemp -p /tmp -d pkgbuildXXXXXX)
	({
		LANG=C \
			bsdtar --acls --xattrs --preserve-permissions \
			-xf ${TFILE} -C ${TDIR}
	}) &
	process $! "Extracting sources to build-directory..."
	return $?
}

function pkgbuild::pkginfo() {
	local PACKAGER=$(grep -oe '^PACKAGER=.*$' /etc/makepkg.conf | sed 's%[^"]*"\(.*\)"%\1%')
	local PKGINFO=(
		"# --------------------"
		"# made with 'pkgbuild'"
		"# ->license: MIT"
		"# --------------------"
		"# Package: ${PKGNAME}"
		"# Maintainer: ${PACKAGER}"
		"# --------------------"
		"pkgname = ${PKGNAME}"
		"pkgver = ${PKGVER}-1"
		"pkgdesc = ${PKGDESC}"
		"url = file:///${PKGNAME}-${PKGVER}-1-${PKGARCH}.pkg.tar.xz"
		"builddate = $(date +%s)"
		"packager = ${PACKAGER}"
		"size = $(du --apparent-size -b ${TFILE} | cut -f1)"
		"arch = ${PKGARCH}"
		"license = MIT"
		"provides = ${PKGNAME}"
		"md5sums = $(md5sum -b ${TFILE} | cut -d' ' -f1)"
	)
	for info in "${PKGINFO[@]}"; do
		echo ${info} >>${TDIR}/.PKGINFO
	done
	return $?
}

function pkgbuild::mtree() {
	pushd ${TDIR} &>/dev/zero
	({
		local SCRIPT=""
		if [[ -e .INSTALL ]]; then
			SCRIPT=".INSTALL"
		fi
		LANG=C \
			bsdtar --acls --xattrs --preserve-permissions --format=mtree \
			--options='!all,use-set,type,uid,gid,mode,time,size,md5,sha256,link' \
			-czf - .PKGINFO ${SCRIPT} * >.MTREE
	}) &
	process $! "Creating .MTREE..."
	popd &>/dev/zero
	return $?
}

function pkgbuild::make() {
	DEST=${PWD}
	pushd ${TDIR} &>/dev/zero
	({
		local SCRIPT=""
		if [[ -e .INSTALL ]]; then
			SCRIPT=".INSTALL"
		fi
		LANG=C \
			bsdtar --acls --xattrs --preserve-permissions \
			-cf - .MTREE .PKGINFO ${SCRIPT} * \
			| xz -4 --threads=0 -z -c - \
				>"${DEST}/${PKGNAME}-${PKGVER}-1-${PKGARCH}.pkg.tar.xz"
	}) &
	popd &>/dev/zero
	process $! "Building package..."
	return $?
}

function pkgbuild::clean() {
	rm -f ${TFILE}
	rm -rf ${TDIR}
	unset TDIR TFILE DEST PKGNAME PKGVER PKGREL PKGDESC
	unset green red orange purple bold uline ital sgr0
	return $?
}

function pkgbuild() {
	pkgbuild::source $1 || send err "pkgbuild::source failed..."
	pkgbuild::extract || send err "pkgbuild::extract failed..."
	pkgbuild::pkginfo || send err "pkgbuild::pkginfo failed..."
	pkgbuild::mtree || send err "pkgbuild::mtree failed..."
	pkgbuild::make || send err "pkgbuild::make failed..."
	send msg "${purple}DONE\n"
	pkgbuild::clean
	exit $?
}

# in case printf is not available
if ! [[ $(command -v printf) ]]; then
	function printf() {
		echo -ne $@
	}
fi

# looking for tar-command
if ! [[ $(command -v bsdtar) ]]; then
	printf "bsdtar was not found...\n"
fi

# main
if [[ $# -eq 1 ]]; then
	if [[ -d $1 ]]; then
		init
		printf "\t ${bold}${green}PKGBUILD:${uline}${purple}/             ${sgr0}\n"
		send msg "Enter a package name : "
		send req PKGNAME
		if [[ -n "${PKGNAME}" ]]; then
			send chk
		else
			send err "arguments cannot be empty..."
		fi
		send msg "Enter package version : "
		send req PKGVER
		if [[ -n "${PKGVER}" ]]; then
			send chk
		else
			send err "arguments cannot be empty..."
		fi
		send msg "A short description : "
		send req PKGDESC
		if [[ -n "${PKGDESC}" ]]; then
			send chk
		else
			send err "arguments cannot be empty..."
		fi
		send msg "Enter target architecture : "
		send req PKGARCH
		if [[ -n "${PKGARCH}" ]]; then
			send chk
		else
			send err "arguments cannot be empty..."
		fi
		pkgbuild $1
	else
		send err "$1 is not a directory..."
	fi
else
	printf "\nUsage:\n\t$(basename $0) [DIRECTORY]\n\t- creates a package of files in DIRECTORY\n"
	exit 0
fi
